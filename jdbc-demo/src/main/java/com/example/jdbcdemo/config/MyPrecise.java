package com.example.jdbcdemo.config;import com.google.common.base.Preconditions;import io.shardingsphere.api.algorithm.sharding.PreciseShardingValue;import io.shardingsphere.api.algorithm.sharding.standard.PreciseShardingAlgorithm;import org.springframework.util.CollectionUtils;import java.util.Collection;public class MyPrecise implements PreciseShardingAlgorithm<String> {    @Override    public String doSharding(Collection<String> availableTargetNames, PreciseShardingValue<String> shardingValue) {        return getActualTableName(availableTargetNames, shardingValue);    }    private String getActualTableName(Collection<String> availableTargetNames, final PreciseShardingValue<String> shardingValue) {        String currentTableName = shardingValue.getLogicTableName()+"_"+shardingValue.getValue();        if (!CollectionUtils.isEmpty(availableTargetNames)) {            if (availableTargetNames.contains(currentTableName)) {                return currentTableName;            }        }        return shardingValue.getLogicTableName();    }}